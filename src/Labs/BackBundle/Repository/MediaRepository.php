<?php

namespace Labs\BackBundle\Repository;

/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * Recupere un seul media
     */
    public function getOne($id)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->where($qb->expr()->eq('m.id', ':id'));
        $qb->setParameter(':id', $id);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param null $type
     * @param $dossier
     * @return array
     * Met tout les medias à false du type et du dossier concernés
     */
   public function UpdateAllFalse($type = null, $dossier)
   {
       $qb = $this->createQueryBuilder('m');
       $qb->leftJoin('m.dossier', 'd')
           ->leftJoin('m.type', 't');
       $qb->where(
           $qb->expr()->eq('m.dossier', ':dossier'),
           $qb->expr()->eq('m.type', ':type')
       );
       $qb->setParameter(':dossier', $dossier);
       $qb->setParameter(':type', $type);
       return $qb->getQuery()->getResult();
   }

    /**
     * @param $media
     * @param null $type
     * @param $dossier
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * Met le media à True du type et du dossier concerné et le media associée
     */
    public function UpdateTrue($media, $type = null, $dossier)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd')
            ->leftJoin('m.type', 't');
        $qb->where(
            $qb->expr()->eq('m.id', ':media'),
            $qb->expr()->eq('m.dossier', ':dossier'),
            $qb->expr()->eq('m.type', ':type')
        );
        $qb->setParameter(':media', $media);
        $qb->setParameter(':dossier', $dossier);
        $qb->setParameter(':type', $type);
        return $qb->getQuery()->getSingleResult();
    }

    /**
     * @param $dossier
     * @return array
     * Met tout les medias a false du dossier concernée
     */
    public function UpdateStatusAllFalse($dossier)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd');
        $qb->where(
            $qb->expr()->eq('m.dossier', ':dossier')
        );
        $qb->setParameter(':dossier', $dossier);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $media
     * @param $dossier
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * Met le media à True du dossier concerné et le media associée
     */
    public function UpdateStatusTrue($media, $dossier)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd');
        $qb->where(
            $qb->expr()->eq('m.id', ':media'),
            $qb->expr()->eq('m.dossier', ':dossier')
        );
        $qb->setParameter(':media', $media);
        $qb->setParameter(':dossier', $dossier);
        return $qb->getQuery()->getSingleResult();
    }

    /**
     * @param $dossier
     * @return array
     */
    public function findLastMedia($dossier, $num = null)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd')
            ->addSelect('d')
            ->leftJoin('m.type', 't')
            ->addSelect('t');

        $qb->where(
            $qb->expr()->eq('m.status', 1),
            $qb->expr()->in('d.id', ':dossier')
        );
        $qb->groupBy('d.id');
        $qb->setParameter(':dossier', $dossier);
        if(null !== $num)
        {
            $qb->setMaxResults($num);
        }
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $media
     * @param $event
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneMedia($media, $event)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.event', 'e');
        $qb->where(
            $qb->expr()->eq('m.id', ':media'),
            $qb->expr()->eq('m.event', ':event')
        );
        $qb->setParameter(':media', $media);
        $qb->setParameter(':event', $event);
        return $qb->getQuery()->getSingleResult();
    }

    public function findLastMediaLimit($type = null, $num = null)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd')
            ->leftJoin('m.type', 't')
            ->addSelect('t')
            ->addSelect('d');
        // Si le Type de wedding est passé en parametre et different de null
        if(null !== $type){
            $qb->where(
                $qb->expr()->eq('m.actived', 1)
            );
            $qb->andWhere($qb->expr()->in('m.type', ':type'));
            $qb->setParameter(':type', $type);
        }
        // Si le num de selection de wedding est passé en parametre et different de null

        if(null !== $num){
            $qb->setMaxResults($num);
        }

        $qb->orderBy('d.created', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findSlideMedia($dossier)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.dossier', 'd');
        $qb->where($qb->expr()->eq('d.id', ':dossier'));
        $qb->andWhere(
            $qb->expr()->orX(
                $qb->expr()->eq('m.status', 1),
                $qb->expr()->eq('m.actived', 1)
            )
        );
        $qb->setParameter(':dossier', $dossier);
        return $qb->getQuery()->getResult();
    }

    public function findAllSlideMedia($events)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.event', 'e');
        $qb->where($qb->expr()->eq('e.id', ':event'));
        $qb->andWhere($qb->expr()->eq('m.actived', 1));
        $qb->setParameter(':event', $events);
        return $qb->getQuery()->getSingleResult();
    }

    public function findSlideEvents($num = null)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.event','e')
            ->addSelect('e')
            ->leftJoin('e.category', 'c')
            ->addSelect('c')
            ->where($qb->expr()->eq('e.online', 1))
            ->andWhere($qb->expr()->eq('m.actived', 1))
            ->orderBy('e.created', 'DESC');
        if(null !== $num){
            $qb->setMaxResults($num);
        }
        return $qb->getQuery()->getResult();
    }


    public function findLastMediaEventsLimit($events = null, $num = null)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->leftJoin('m.event', 'e')
            ->leftJoin('e.category', 'c')
            ->addSelect('e')
            ->addSelect('c');
        // Si le Type de wedding est passé en parametre et different de null
        if(null !== $events){
            $qb->where(
                $qb->expr()->eq('m.actived', 1)
            );
            $qb->andWhere($qb->expr()->in('m.event', ':events'));
            $qb->setParameter(':events', $events);
        }
        // Si le num de selection de wedding est passé en parametre et different de null

        if(null !== $num){
            $qb->setMaxResults($num);
        }

        $qb->orderBy('e.created', 'DESC');
        return $qb->getQuery()->getResult();
    }
}
